// Author: dWallet Labs, Ltd.
// SPDX-License-Identifier: BSD-3-Clause-Clear

use std::{array, iter};

use bulletproofs::{BulletproofGens, PedersenGens};
use commitment::{MultiPedersen, Pedersen};
use crypto_bigint::{rand_core::CryptoRngCore, U256, U64};
use curve25519_dalek::ristretto::RistrettoPoint;
use group::{helpers::FlatMapResults, ristretto, GroupElement as _};
use merlin::Transcript;
use serde::{Deserialize, Serialize};

use crate::{
    range::{CommitmentScheme, CommitmentSchemeCommitmentSpaceGroupElement},
    Error, Result,
};

/// A wrapper around `bulletproofs::RangeProof` that optionally adds the `aggregation_commitments`
/// for aggregated range proofs.
///
/// Whilst bulletproofs claim to have a constant-size proof and support
/// aggregation, these claims are false: the commitments aren't aggregated but are instead
/// concatenated, so that the commitment for the aggregated proofs is O(n) in the number of parties
/// and so is the verification time.
///
/// This breaks our `range::RangeProof` and `proofs::aggregation` interfaces, but since this is due
/// to the fact bulletproofs aren't actually aggregatable, we decided to think of the aggregated
/// proof as a (non-constant) struct that holds both what bulletproofs says is the proof and the
/// commitment.
///
/// This allows `RangeProof::verify()` to get the actual aggregated commitment as the parameter
/// and compare them to the non-aggregated `aggregation_commitments`, whilst still allowing for the
/// implementation to use the individual `commitment` of each player to verify the proof.
///
/// For non-aggregated commitment, the `commitment` generated by `bulletproofs` are valid and
/// `aggregation_commitments` can remain empty.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Eq)]
pub struct RangeProof {
    proof: bulletproofs::RangeProof,
    number_of_parties: usize,
    number_of_witnesses: usize,
    aggregation_commitments: Vec<ristretto::GroupElement>,
}

pub const RANGE_CLAIM_BITS: usize = 32;

pub const COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS: usize = ristretto::SCALAR_LIMBS;

impl super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS> for RangeProof {
    const NAME: &'static str = "Bulletproofs over the Ristretto group";

    const RANGE_CLAIM_BITS: usize = RANGE_CLAIM_BITS;

    type RangeClaimGroupElement = ristretto::Scalar;

    type CommitmentScheme<const NUM_RANGE_CLAIMS: usize> = MultiPedersen<
        NUM_RANGE_CLAIMS,
        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
        ristretto::Scalar,
        ristretto::GroupElement,
    >;

    type PublicParameters<const NUM_RANGE_CLAIMS: usize> = PublicParameters<NUM_RANGE_CLAIMS>;

    fn prove<const NUM_RANGE_CLAIMS: usize>(
        _public_parameters: &Self::PublicParameters<NUM_RANGE_CLAIMS>,
        witnesses: Vec<
            commitment::MessageSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
        commitments_randomness: Vec<
            commitment::RandomnessSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
        transcript: Transcript,
        rng: &mut impl CryptoRngCore,
    ) -> Result<(
        Self,
        Vec<
            commitment::CommitmentSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
    )> {
        let number_of_witnesses = witnesses.len();

        // As bulletproofs proves a single witness, flatten the witnesses vector
        // from an entry over `NUM_RANGE_CLAIMS` to a vector of individual range claims.
        let witnesses: Vec<_> = witnesses
            .into_iter()
            .flat_map(<[_; NUM_RANGE_CLAIMS]>::from)
            .collect();

        // Bulletproofs think of range claims a numbers and not scalars.
        // Transition, whilst ensuring they are in range.
        let witnesses: Vec<_> = witnesses.into_iter().map(U256::from).collect();

        if witnesses
            .iter()
            .any(|witness| witness >= &(U256::ONE << RANGE_CLAIM_BITS))
        {
            return Err(Error::InvalidParameters)?;
        }

        let witnesses: Vec<u64> = witnesses
            .into_iter()
            .map(|witness| U64::from(&witness).into())
            .collect();

        // Similarly, flatten commitments randomnesses.
        let commitments_randomness: Vec<_> = commitments_randomness
            .into_iter()
            .flat_map(|multicommitment_randomness| {
                <[_; NUM_RANGE_CLAIMS]>::from(multicommitment_randomness)
            })
            .map(curve25519_dalek::scalar::Scalar::from)
            .collect();

        // Bulletproofs' API supports power-of-two-sized batching exclusively.
        // To handle that, we pad to the next power-of-two with a witness zero and randomness zero.
        let padded_witnesses_length = witnesses
            .len()
            .checked_next_power_of_two()
            .ok_or(Error::InvalidParameters)?;
        let mut iter = witnesses.into_iter();
        let witnesses: Vec<u64> = iter::repeat_with(|| iter.next().unwrap_or(0u64))
            .take(padded_witnesses_length)
            .collect();

        let mut iter = commitments_randomness.into_iter();
        let commitments_randomness: Vec<curve25519_dalek::scalar::Scalar> =
            iter::repeat_with(|| {
                iter.next()
                    .unwrap_or(curve25519_dalek::scalar::Scalar::zero())
            })
            .take(padded_witnesses_length)
            .collect();

        let bulletproofs_generators = BulletproofGens::new(
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            witnesses.len(),
        );
        let commitment_generators = PedersenGens::default();

        let (proof, commitments) = bulletproofs::RangeProof::prove_multiple_with_rng(
            bulletproofs_generators,
            commitment_generators,
            transcript,
            witnesses.as_slice(),
            commitments_randomness.as_slice(),
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            rng,
        ).map_err(|_| Error::InvalidParameters)?;

        let mut commitments_iter = commitments
            .into_iter()
            .map(|compressed_commitment| {
                compressed_commitment
                    .try_into()
                    .map_err(|_| Error::InternalError)
            })
            .collect::<Result<Vec<_>>>()?
            .into_iter();

        let commitments: Result<Vec<_>> = iter::repeat_with(|| {
            // Un-flatten individual commitments to a multi-commitment,
            // to fit the `RangeProof` API which returns a vector of commitments over
            // `NUM_RANGE_CLAIMS` elements.
            array::from_fn(|_| commitments_iter.next().ok_or(Error::InvalidParameters))
                .flat_map_results()
                .map(
                    commitment::CommitmentSpaceGroupElement::<
                        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                        Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
                    >::from,
                )
        })
        .take(number_of_witnesses)
        .collect();

        Ok((RangeProof::new(proof, number_of_witnesses), commitments?))
    }

    fn verify<const NUM_RANGE_CLAIMS: usize>(
        &self,
        _public_parameters: &Self::PublicParameters<NUM_RANGE_CLAIMS>,
        commitments: Vec<
            commitment::CommitmentSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
        transcript: Transcript,
        rng: &mut impl CryptoRngCore,
    ) -> Result<()> {
        let commitments = if self.aggregation_commitments.is_empty() {
            let commitments: Vec<_> = commitments
                .into_iter()
                .flat_map(|multicommitment| {
                    <[ristretto::GroupElement; NUM_RANGE_CLAIMS]>::from(multicommitment)
                })
                .collect();

            let padded_commitments_length = commitments
                .len()
                .checked_next_power_of_two()
                .ok_or(Error::InvalidParameters)?;
            let identity = commitments
                .first()
                .ok_or(Error::InvalidParameters)?
                .neutral();
            let mut iter = commitments.into_iter();

            iter::repeat_with(|| iter.next().unwrap_or(identity))
                .take(padded_commitments_length)
                .collect()
        } else {
            if commitments
                != Self::aggregate_commitments(
                    self.number_of_parties,
                    self.number_of_witnesses,
                    self.aggregation_commitments.clone(),
                )?
            {
                return Err(Error::ProofVerification);
            }

            self.aggregation_commitments.clone()
        };

        let compressed_commitments: Vec<_> = commitments
            .into_iter()
            .map(RistrettoPoint::from)
            .map(|point| point.compress())
            .collect();

        let bulletproofs_generators = BulletproofGens::new(
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            compressed_commitments.len(),
        );
        let commitment_generators = PedersenGens::default();

        let mut transcript = transcript;

        self.proof.verify_multiple_with_rng(
            &bulletproofs_generators,
            &commitment_generators,
            &mut transcript,
            compressed_commitments.as_slice(),
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            rng,
        ).map_err(|e| match e {
            bulletproofs::ProofError::VerificationError => Error::OutOfRange,
            _ => Error::InvalidParameters
        })
    }
}

#[derive(Debug, PartialEq, Clone, Serialize, Deserialize)]
pub struct PublicParameters<const NUM_RANGE_CLAIMS: usize> {
    pub commitment_scheme_public_parameters: commitment::PublicParameters<
        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
        MultiPedersen<
            NUM_RANGE_CLAIMS,
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            ristretto::Scalar,
            ristretto::GroupElement,
        >,
    >,
    pub number_of_range_claims: usize,
}

impl<const NUM_RANGE_CLAIMS: usize> Default for PublicParameters<NUM_RANGE_CLAIMS> {
    fn default() -> Self {
        let scalar_public_parameters = ristretto::scalar::PublicParameters::default();
        let group_public_parameters = ristretto::group_element::PublicParameters::default();

        let commitment_generators = PedersenGens::default();

        let commitment_scheme_public_parameters = commitment::PublicParameters::<
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            Pedersen<
                1,
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                ristretto::Scalar,
                ristretto::GroupElement,
            >,
        >::new::<
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            ristretto::Scalar,
            ristretto::GroupElement,
        >(
            scalar_public_parameters,
            group_public_parameters,
            [commitment_generators.B.compress().try_into().unwrap()],
            commitment_generators
                .B_blinding
                .compress()
                .try_into()
                .unwrap(),
        )
        .into();

        Self {
            commitment_scheme_public_parameters,
            number_of_range_claims: NUM_RANGE_CLAIMS,
        }
    }
}

impl<const NUM_RANGE_CLAIMS: usize>
    AsRef<
        commitment::PublicParameters<
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            MultiPedersen<
                NUM_RANGE_CLAIMS,
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                ristretto::Scalar,
                ristretto::GroupElement,
            >,
        >,
    > for PublicParameters<NUM_RANGE_CLAIMS>
{
    fn as_ref(
        &self,
    ) -> &commitment::PublicParameters<
        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
        MultiPedersen<
            NUM_RANGE_CLAIMS,
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            ristretto::Scalar,
            ristretto::GroupElement,
        >,
    > {
        &self.commitment_scheme_public_parameters
    }
}

impl RangeProof {
    fn new(proof: bulletproofs::RangeProof, number_of_witnesses: usize) -> Self {
        Self {
            proof,
            number_of_parties: 1,
            number_of_witnesses,
            aggregation_commitments: vec![],
        }
    }

    fn aggregate_commitments<const NUM_RANGE_CLAIMS: usize>(
        number_of_parties: usize,
        number_of_witnesses: usize,
        aggregation_commitments: Vec<ristretto::GroupElement>,
    ) -> Result<
        Vec<
            commitment::CommitmentSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                CommitmentScheme<
                    COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                    NUM_RANGE_CLAIMS,
                    Self,
                >,
            >,
        >,
    > {
        let padded_commitments_length = aggregation_commitments
            .len()
            .checked_next_power_of_two()
            .ok_or(Error::InvalidParameters)?;
        let identity = aggregation_commitments
            .first()
            .ok_or(Error::InvalidParameters)?
            .neutral();

        let mut iter = aggregation_commitments.into_iter();
        let aggregation_commitments: Vec<_> = iter::repeat_with(|| iter.next().unwrap_or(identity))
            .take(padded_commitments_length)
            .collect();
        let mut bulletproofs_commitments_iter = aggregation_commitments.into_iter();

        let number_of_unflattened_commitments = number_of_witnesses
            .checked_mul(number_of_parties)
            .ok_or(Error::InvalidParameters)?;

        let unflattened_commitments = iter::repeat_with(|| {
            array::from_fn(|_| {
                bulletproofs_commitments_iter
                    .next()
                    .ok_or(Error::InternalError)
            })
            .flat_map_results()
            .map(
                CommitmentSchemeCommitmentSpaceGroupElement::<
                    { COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS },
                    NUM_RANGE_CLAIMS,
                    Self,
                >::from,
            )
        })
        .take(number_of_unflattened_commitments)
        .collect::<Result<Vec<_>>>()?;

        let bulletproofs_aggregated_commitments = (0..number_of_witnesses)
            .map(|i| {
                (0..number_of_parties)
                    .map(|j: usize| {
                        let res = j
                            .checked_mul(number_of_witnesses)
                            .and_then(|index| index.checked_add(i))
                            .and_then(|index| unflattened_commitments.get(index).cloned());

                        res.ok_or(Error::InternalError)
                    })
                    .collect::<Result<Vec<_>>>()
            })
            .collect::<Result<Vec<_>>>()?;

        bulletproofs_aggregated_commitments
            .into_iter()
            .map(|v| {
                v.into_iter()
                    .reduce(|a, b| a + b)
                    .ok_or(Error::InternalError)
            })
            .collect()
    }
}
