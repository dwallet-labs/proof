// Author: dWallet Labs, Ltd.
// SPDX-License-Identifier: BSD-3-Clause-Clear

pub mod commitment_round;
pub mod decommitment_round;
pub mod proof_aggregation_round;
pub mod proof_share_round;

pub use proof_aggregation_round::Output;

use crate::range::{CommitmentScheme, CommitmentSchemeCommitmentSpaceGroupElement};
use crate::{Error, Result};
use bulletproofs::{BulletproofGens, PedersenGens};
use commitment::{MultiPedersen, Pedersen};
use crypto_bigint::rand_core::CryptoRngCore;
use crypto_bigint::{U256, U64};
use curve25519_dalek::ristretto::RistrettoPoint;
use curve25519_dalek::traits::Identity;
use group::helpers::FlatMapResults;
use group::ristretto;
use merlin::Transcript;
use serde::{Deserialize, Serialize};
use std::{array, iter};

/// A wrapper around `bulletproofs::RangeProof` that optionally adds the `aggregation_commitments`
/// for aggregated range proofs.
///
/// Whilst bulletproofs claim to have a constant-size proof and support
/// aggregation, these claims are false: the commitments aren't aggregated but are instead
/// concatenated, so that the commitment for the aggregated proofs is O(n) in the number of parties
/// and so is the verification time.
///
/// This breaks our `range::RangeProof` and `proofs::aggregation` interfaces, but since this is due
/// to the fact bulletproofs aren't actually aggregatable, we decided to think of the aggregated
/// proof as a (non-constant) struct that holds both what bulletproofs says is the proof and the
/// commitment.
///
/// This allows `RangeProof::verify()` to get the actual aggregated commitment as the parameter
/// and compare them to the non-aggregated `aggregation_commitments`, whilst still allowing for the implementation to use the individual
/// commitment of each of the players in order to verify the proof.
///
/// For non-aggregated commitment, the commitment generated by bulletproofs are valid and
/// `aggregation_commitments` can remain empty.
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Eq)]
pub struct RangeProof {
    proof: bulletproofs::RangeProof,
    aggregation_commitments: Vec<ristretto::GroupElement>,
}

pub const RANGE_CLAIM_BITS: usize = 32;

pub const COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS: usize = ristretto::SCALAR_LIMBS;

impl super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS> for RangeProof {
    const NAME: &'static str = "Bulletproofs over the Ristretto group";

    type RangeClaimGroupElement = ristretto::Scalar;

    type CommitmentScheme<const NUM_RANGE_CLAIMS: usize> = MultiPedersen<
        NUM_RANGE_CLAIMS,
        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
        ristretto::Scalar,
        ristretto::GroupElement,
    >;

    const RANGE_CLAIM_BITS: usize = RANGE_CLAIM_BITS;

    type PublicParameters<const NUM_RANGE_CLAIMS: usize> = PublicParameters<NUM_RANGE_CLAIMS>;

    fn prove<const NUM_RANGE_CLAIMS: usize>(
        _public_parameters: &Self::PublicParameters<NUM_RANGE_CLAIMS>,
        witnesses: Vec<
            commitment::MessageSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
        commitments_randomness: Vec<
            commitment::RandomnessSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
        transcript: Transcript,
        rng: &mut impl CryptoRngCore,
    ) -> Result<(
        Self,
        Vec<
            commitment::CommitmentSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
    )> {
        let number_of_witnesses = witnesses.len();

        // As bulletproofs proves a single witness, flatten the witnesses vector
        // from an entry over `NUM_RANGE_CLAIMS` to a vector of individual range claims.
        let witnesses: Vec<_> = witnesses
            .into_iter()
            .flat_map(<[_; NUM_RANGE_CLAIMS]>::from)
            .collect();

        // Buletproofs think of range claims a numbers and not scalars.
        // Transition, whilst ensuring they are in range.
        let witnesses: Vec<_> = witnesses.into_iter().map(U256::from).collect();

        if witnesses
            .iter()
            .any(|witness| witness >= &(U256::ONE << RANGE_CLAIM_BITS))
        {
            return Err(Error::InvalidParameters)?;
        }

        let witnesses: Vec<u64> = witnesses
            .into_iter()
            .map(|witness| U64::from(&witness).into())
            .collect();

        // Similarly, flatten commitments randomnesses.
        let commitments_randomness: Vec<_> = commitments_randomness
            .into_iter()
            .flat_map(|multicommitment_randomness| {
                <[_; NUM_RANGE_CLAIMS]>::from(multicommitment_randomness)
            })
            .map(curve25519_dalek::scalar::Scalar::from)
            .collect();

        // Bulletproofs' API supports power-of-two-sized batching exclusively.
        // To handle that, we pad to the next power-of-two with a witness zero and randomness zero.
        let padded_witnesses_length = witnesses.len().next_power_of_two();
        let mut iter = witnesses.into_iter();
        let witnesses: Vec<u64> = iter::repeat_with(|| iter.next().unwrap_or_else(|| 0u64))
            .take(padded_witnesses_length)
            .collect();

        let mut iter = commitments_randomness.into_iter();
        let commitments_randomness: Vec<curve25519_dalek::scalar::Scalar> =
            iter::repeat_with(|| {
                iter.next()
                    .unwrap_or_else(|| curve25519_dalek::scalar::Scalar::zero())
            })
            .take(padded_witnesses_length)
            .collect();

        let bulletproofs_generators = BulletproofGens::new(
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            witnesses.len(),
        );
        let commitment_generators = PedersenGens::default();

        let (proof, commitments) = bulletproofs::RangeProof::prove_multiple_with_rng(
            bulletproofs_generators,
            commitment_generators,
            transcript,
            witnesses.as_slice(),
            commitments_randomness.as_slice(),
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            rng,
        ).map_err(|_| Error::InvalidParameters)?;

        let mut commitments_iter = commitments
            .into_iter()
            .map(|compressed_commitment| {
                compressed_commitment
                    .try_into()
                    .map_err(|_| Error::InternalError)
            })
            .collect::<Result<Vec<_>>>()?
            .into_iter();

        let commitments: Result<Vec<_>> = iter::repeat_with(|| {
            // Unflatten individual commitments to a multi-commitment,
            // to fit the `RangeProof` API which returns a vector of commitments over `NUM_RANGE_CLAIMS` elements.
            array::from_fn(|_| commitments_iter.next().ok_or(Error::InvalidParameters))
                .flat_map_results()
                .map(
                    commitment::CommitmentSpaceGroupElement::<
                        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                        Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
                    >::from,
                )
        })
        .take(number_of_witnesses)
        .collect();

        Ok((RangeProof::new(proof), commitments?))
    }

    fn verify<const NUM_RANGE_CLAIMS: usize>(
        &self,
        _public_parameters: &Self::PublicParameters<NUM_RANGE_CLAIMS>,
        commitments: Vec<
            commitment::CommitmentSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                Self::CommitmentScheme<NUM_RANGE_CLAIMS>,
            >,
        >,
        transcript: Transcript,
        rng: &mut impl CryptoRngCore,
    ) -> Result<()> {
        let commitments = if self.aggregation_commitments.is_empty() {
            commitments
                .into_iter()
                .flat_map(|multicommitment| {
                    <[ristretto::GroupElement; NUM_RANGE_CLAIMS]>::from(multicommitment)
                })
                .collect()
        } else {
            self.aggregation_commitments_match_aggregated_commitments(commitments.clone())?;

            self.aggregation_commitments.clone()
        };

        let commitments: Vec<_> = commitments.into_iter().map(RistrettoPoint::from).collect();

        let padded_commitments_length = commitments.len().next_power_of_two();
        let mut iter = commitments.into_iter();
        let compressed_commitments: Vec<_> =
            iter::repeat_with(|| iter.next().unwrap_or_else(|| RistrettoPoint::identity()))
                .take(padded_commitments_length)
                .map(|commitment| commitment.compress())
                .collect();

        let bulletproofs_generators = BulletproofGens::new(
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            compressed_commitments.len(),
        );
        let commitment_generators = PedersenGens::default();

        let mut transcript = transcript;
        Ok(self.proof.verify_multiple_with_rng(
            &bulletproofs_generators,
            &commitment_generators,
            &mut transcript,
            compressed_commitments.as_slice(),
            <Self as super::RangeProof<COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS>>::RANGE_CLAIM_BITS,
            rng,
        ).map_err(|e| match e {
            bulletproofs::ProofError::VerificationError => Error::OutOfRange,
            _ => Error::InvalidParameters
        })?)
    }
}

#[derive(Debug, PartialEq, Clone, Serialize, Deserialize)]
pub struct PublicParameters<const NUM_RANGE_CLAIMS: usize> {
    pub commitment_scheme_public_parameters: commitment::PublicParameters<
        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
        MultiPedersen<
            NUM_RANGE_CLAIMS,
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            ristretto::Scalar,
            ristretto::GroupElement,
        >,
    >,
    pub number_of_range_claims: usize,
}

impl<const NUM_RANGE_CLAIMS: usize> Default for PublicParameters<NUM_RANGE_CLAIMS> {
    fn default() -> Self {
        let scalar_public_parameters = ristretto::scalar::PublicParameters::default();
        let group_public_parameters = ristretto::group_element::PublicParameters::default();

        let commitment_generators = PedersenGens::default();

        let commitment_scheme_public_parameters = commitment::PublicParameters::<
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            Pedersen<
                1,
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                ristretto::Scalar,
                ristretto::GroupElement,
            >,
        >::new::<
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            ristretto::Scalar,
            ristretto::GroupElement,
        >(
            scalar_public_parameters,
            group_public_parameters,
            [commitment_generators.B.compress().try_into().unwrap()],
            commitment_generators
                .B_blinding
                .compress()
                .try_into()
                .unwrap(),
        )
        .into();

        Self {
            commitment_scheme_public_parameters,
            number_of_range_claims: NUM_RANGE_CLAIMS,
        }
    }
}

impl<const NUM_RANGE_CLAIMS: usize>
    AsRef<
        commitment::PublicParameters<
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            MultiPedersen<
                NUM_RANGE_CLAIMS,
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                ristretto::Scalar,
                ristretto::GroupElement,
            >,
        >,
    > for PublicParameters<NUM_RANGE_CLAIMS>
{
    fn as_ref(
        &self,
    ) -> &commitment::PublicParameters<
        COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
        MultiPedersen<
            NUM_RANGE_CLAIMS,
            COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
            ristretto::Scalar,
            ristretto::GroupElement,
        >,
    > {
        &self.commitment_scheme_public_parameters
    }
}

impl RangeProof {
    fn new(proof: bulletproofs::RangeProof) -> Self {
        Self {
            proof,
            aggregation_commitments: vec![],
        }
    }

    fn new_aggregated(
        proof: bulletproofs::RangeProof,
        aggregation_commitments: Vec<ristretto::GroupElement>,
    ) -> Self {
        Self {
            proof,
            aggregation_commitments,
        }
    }

    fn aggregation_commitments_match_aggregated_commitments<const NUM_RANGE_CLAIMS: usize>(
        &self,
        aggregated_commitments: Vec<
            commitment::CommitmentSpaceGroupElement<
                COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                CommitmentScheme<
                    COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS,
                    NUM_RANGE_CLAIMS,
                    Self,
                >,
            >,
        >,
    ) -> Result<()> {
        if aggregated_commitments
            .len()
            .checked_mul(NUM_RANGE_CLAIMS)
            .and_then(|x| self.aggregation_commitments.len().checked_rem(x))
            .ok_or(Error::ProofVerification)?
            != 0
        {
            return Err(Error::ProofVerification)?;
        }

        let number_of_parties = aggregated_commitments
            .len()
            .checked_mul(NUM_RANGE_CLAIMS)
            .and_then(|x| self.aggregation_commitments.len().checked_div(x))
            .ok_or(Error::InternalError)?;

        let number_of_witnesses = aggregated_commitments
            .len()
            .checked_mul(number_of_parties)
            .ok_or(Error::InternalError)?;

        let mut bulletproofs_commitments_iter = self.aggregation_commitments.clone().into_iter();

        let bulletproofs_aggregated_commitments = iter::repeat_with(|| {
            array::from_fn(|_| {
                bulletproofs_commitments_iter
                    .next()
                    .ok_or(Error::InternalError)
            })
            .flat_map_results()
            .map(
                CommitmentSchemeCommitmentSpaceGroupElement::<
                    { COMMITMENT_SCHEME_MESSAGE_SPACE_SCALAR_LIMBS },
                    NUM_RANGE_CLAIMS,
                    Self,
                >::from,
            )
        })
        .take(number_of_witnesses)
        .collect::<Result<Vec<_>>>()?;

        let bulletproofs_aggregated_commitments = (0..aggregated_commitments.len())
            .map(|i| {
                (0..number_of_parties.into())
                    .map(|j: usize| {
                        j.checked_mul(aggregated_commitments.len())
                            .and_then(|index| index.checked_add(i))
                            .and_then(|index| {
                                bulletproofs_aggregated_commitments.get(index).cloned()
                            })
                            .ok_or(Error::InternalError)
                    })
                    .collect::<Result<Vec<_>>>()
            })
            .collect::<Result<Vec<_>>>()?;

        let bulletproofs_aggregated_commitments: Vec<_> = bulletproofs_aggregated_commitments
            .into_iter()
            .map(|v| {
                v.into_iter()
                    .reduce(|a, b| a + b)
                    .ok_or(Error::InternalError)
            })
            .collect::<Result<Vec<_>>>()?;

        if aggregated_commitments == bulletproofs_aggregated_commitments {
            Ok(())
        } else {
            Err(Error::ProofVerification)?
        }
    }
}

#[cfg(feature = "test_helpers")]
mod tests {
    use super::*;
    use crate::aggregation::test_helpers;
    use group::Samplable;
    use group::{GroupElement, PartyID};
    use rand::Rng;
    use rand_core::OsRng;
    use rstest::rstest;
    use std::collections::{HashMap, HashSet};

    const NUM_RANGE_CLAIMS: usize = 4;

    fn generate_commitment_round_parties(
        number_of_parties: usize,
        batch_size: usize,
    ) -> HashMap<PartyID, commitment_round::Party<NUM_RANGE_CLAIMS>> {
        let mut provers = HashSet::new();
        (1..=number_of_parties).for_each(|i| {
            let party_id: u16 = i.try_into().unwrap();

            provers.insert(party_id);
        });

        let ristretto_scalar_public_parameters = ristretto::scalar::PublicParameters::default();

        (1..=number_of_parties)
            .map(|party_id| {
                let party_id: u16 = party_id.try_into().unwrap();

                let transcript = Transcript::new("".as_bytes());
                let witnesses = (0..batch_size)
                    .map(|_| {
                        array::from_fn(|_| {
                            ristretto::Scalar::new(
                                U64::from(OsRng.gen::<u32>()).into(),
                                &ristretto_scalar_public_parameters,
                            )
                            .unwrap()
                        })
                        .into()
                    })
                    .collect();

                let commitments_randomness = (0..batch_size)
                    .map(|_| {
                        array::from_fn(|_| {
                            ristretto::Scalar::sample(
                                &ristretto_scalar_public_parameters,
                                &mut OsRng,
                            )
                            .unwrap()
                        })
                        .into()
                    })
                    .collect();

                (
                    party_id,
                    commitment_round::Party {
                        party_id,
                        provers: provers.clone(),
                        transcript,
                        witnesses,
                        commitments_randomness,
                    },
                )
            })
            .collect()
    }

    #[rstest]
    #[case(1, 1)]
    #[case(1, 2)]
    #[case(2, 1)]
    #[case(2, 3)]
    #[case(5, 2)]
    fn aggregates(#[case] number_of_parties: usize, #[case] batch_size: usize) {
        let commitment_round_parties =
            generate_commitment_round_parties(number_of_parties, batch_size);

        test_helpers::aggregates(commitment_round_parties);
    }

    #[rstest]
    #[case(2, 1)]
    #[case(3, 1)]
    #[case(5, 2)]
    fn unresponsive_parties_aborts_session_identifiably(
        #[case] number_of_parties: usize,
        #[case] batch_size: usize,
    ) {
        let commitment_round_parties =
            generate_commitment_round_parties(number_of_parties, batch_size);

        test_helpers::unresponsive_parties_aborts_session_identifiably(commitment_round_parties);
    }

    #[rstest]
    #[case(2, 1)]
    #[case(3, 1)]
    #[case(5, 2)]
    fn wrong_decommitment_aborts_session_identifiably(
        #[case] number_of_parties: usize,
        #[case] batch_size: usize,
    ) {
        let commitment_round_parties =
            generate_commitment_round_parties(number_of_parties, batch_size);

        test_helpers::wrong_decommitment_aborts_session_identifiably(commitment_round_parties);
    }

    #[rstest]
    #[case(2, 1)]
    #[case(3, 1)]
    #[case(5, 2)]
    fn failed_proof_share_verification_aborts_session_identifiably(
        #[case] number_of_parties: usize,
        #[case] batch_size: usize,
    ) {
        let commitment_round_parties =
            generate_commitment_round_parties(number_of_parties, batch_size);

        let wrong_commitment_round_parties =
            generate_commitment_round_parties(number_of_parties, batch_size);

        test_helpers::failed_proof_share_verification_aborts_session_identifiably(
            commitment_round_parties,
            wrong_commitment_round_parties,
        );
    }

    // TODO: test where one party tries out of range
}
